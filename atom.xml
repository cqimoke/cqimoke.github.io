<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>默克笔记</title>
  
  
  <link href="https://imoke.win/atom.xml" rel="self"/>
  
  <link href="https://imoke.win/"/>
  <updated>2024-06-17T14:22:30.341Z</updated>
  <id>https://imoke.win/</id>
  
  <author>
    <name>imoke</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 acme.sh 给 Nginx 安装 Let’ s Encrypt 提供的免费 SSL 证书</title>
    <link href="https://imoke.win/2024/06/17/2208/"/>
    <id>https://imoke.win/2024/06/17/2208/</id>
    <published>2024-06-17T14:08:21.000Z</published>
    <updated>2024-06-17T14:22:30.341Z</updated>
    
    <content type="html"><![CDATA[<p>现在新建网站基本全部都要配置 SSL ，可以通过服务器提供商提供的免费 SSL 进行部署，但是有一个缺点，就是有效期一般只有一年，需要每年重新申请，重新安装，之前一直用 Let’s Encrypt 进行部署，防止后面忘记了，写一个记录。</p><h2 id="安装-acme-sh"><a href="#安装-acme-sh" class="headerlink" title="安装 acme.sh"></a>安装 acme.sh</h2><pre class=" language-shell"><code class="language-shell">curl https://get.acme.sh | sh</code></pre><blockquote><p>第一次可能会遇到 <code>curl: (6) Couldn't resolve host 'get.acme.sh'</code> 重试一下就可以了。</p></blockquote><p>然后重新载入一下 <code>.bashrc</code></p><pre class=" language-shell"><code class="language-shell">source ~/.bashrc </code></pre><p>之后就有了 <code>acme.sh</code> 的命令，可以直接运行。</p><h2 id="申请签发-SSL-证书"><a href="#申请签发-SSL-证书" class="headerlink" title="申请签发 SSL 证书"></a>申请签发 SSL 证书</h2><pre class=" language-shell"><code class="language-shell">acme.sh --issue -d www.your-app.com -w /home/www/your-app/current/public</code></pre><blockquote><p>上面这段过程将会往 <code>/home/www/your-app/current/public</code> 创建一个 <code>.well-known</code> 的文件夹，同时 Let’s Encrypt 将会通过你要注册的域名去访问那个文件来确定权限，它可能会去访问 <a href="http://www.your-app.com/.well-known/">http://www.your-app.com/.well-known/</a> 这个路径。</p><p>所以你需要确保 <code>/home/www/your-app/current/public</code> 是在 Nginx 上配置成 root 目录，里面任意文件可以直接域名访问的。</p></blockquote><p>如果成功的话，你就会看到这样的结果：</p><pre class=" language-shell"><code class="language-shell">[Fri Dec 23 11:20:15 CST 2016] Renew: 'www.your-app.com'[Fri Dec 23 11:20:15 CST 2016] Single domain='www.your-app.com'[Fri Dec 23 11:20:15 CST 2016] Getting domain auth token for each domain[Fri Dec 23 11:20:15 CST 2016] Getting webroot for domain='www.your-app.com'[Fri Dec 23 11:20:15 CST 2016] _w='/home/www/your-app/current/public/'[Fri Dec 23 11:20:15 CST 2016] Getting new-authz for domain='www.your-app.com'[Fri Dec 23 11:08:57 CST 2016] The new-authz request is ok.[Fri Dec 23 11:08:57 CST 2016] Verifying:www.your-app.com[Fri Dec 23 11:09:01 CST 2016] Success[Fri Dec 23 11:09:01 CST 2016] Verify finished, start to sign.[Fri Dec 23 11:09:02 CST 2016] Cert success.-----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----[Fri Dec 23 11:09:02 CST 2016] Your cert is in  /home/.acme.sh/www.your-app.com/www.your-app.com.cer [Fri Dec 23 11:09:02 CST 2016] Your cert key is in  /home/.acme.sh/www.your-app.com/www.your-app.com.key [Fri Dec 23 11:09:04 CST 2016] The intermediate CA cert is in  /home/.acme.sh/www.your-app.com/ca.cer [Fri Dec 23 11:09:04 CST 2016] And the full chain certs is there:  /home/.acme.sh/www.your-app.com/fullchain.cer </code></pre><p>你的证书文件已经申请成功了，并放到了 <code>~/.acme.sh/</code> 目录里面。</p><blockquote><p>所有的 acme.sh 配置都记录在 <code>~/.acme.sh/</code> 目录里面，acme.sh 有自动的配置读取，并按域名划分，下次你再次执行的时候，它知道你之前是用的那个目录，只需要告诉它域名就好了。</p></blockquote><h2 id="将-SSL-证书安装到网站的路径，并配置好-restart-Nginx-的动作"><a href="#将-SSL-证书安装到网站的路径，并配置好-restart-Nginx-的动作" class="headerlink" title="将 SSL 证书安装到网站的路径，并配置好 restart Nginx 的动作"></a>将 SSL 证书安装到网站的路径，并配置好 restart Nginx 的动作</h2><blockquote><p>这个比较重要，因为它会让 <code>acme.sh</code> 记住重启 Nginx 的命令，以后自动更新证书的动作需要重启 Nginx</p></blockquote><pre class=" language-shell"><code class="language-shell">acme.sh --installcert -d www.your-app.com \               --keypath       /home/www/ssl/www.your-app.com.key  \               --fullchainpath /home/www/ssl/www.your-app.com.key.pem \               --reloadcmd     "sudo service nginx force-reload"</code></pre><p>然后你会看到结果</p><pre class=" language-shell"><code class="language-shell">[Fri Dec 23 11:59:57 CST 2016] Installing key to:/home/www/ssl/www.your-app.com.key[Fri Dec 23 11:59:57 CST 2016] Installing full chain to:/home/www/ssl/www.your-app.com.key.pem[Fri Dec 23 11:59:57 CST 2016] Run Le_ReloadCmd: sudo service nginx force-reloadRestarting nginx: nginx.[Fri Dec 23 11:59:58 CST 2016] Reload success</code></pre><h2 id="修改一下-sudoer-文件，让-sudo-service-nginx-force-reload-不需要输入密码"><a href="#修改一下-sudoer-文件，让-sudo-service-nginx-force-reload-不需要输入密码" class="headerlink" title="修改一下 sudoer 文件，让 sudo service nginx force-reload 不需要输入密码"></a>修改一下 sudoer 文件，让 <code>sudo service nginx force-reload</code> 不需要输入密码</h2><pre class=" language-shell"><code class="language-shell">sudo visudo</code></pre><p>打开文件以后新增：</p><pre class=" language-shell"><code class="language-shell">ubuntu  ALL=(ALL) NOPASSWD: /usr/sbin/service nginx force-reload</code></pre><blockquote><p><code>ubuntu</code> 是 acme.sh 安装所用的账号</p></blockquote><h2 id="生成-dhparam-pem-文件"><a href="#生成-dhparam-pem-文件" class="headerlink" title="生成 dhparam.pem 文件"></a>生成 dhparam.pem 文件</h2><pre class=" language-shell"><code class="language-shell">openssl dhparam -out /home/www/ssl/dhparam.pem 2048</code></pre><h2 id="修改-Nginx-启用-SSL"><a href="#修改-Nginx-启用-SSL" class="headerlink" title="修改 Nginx 启用 SSL"></a>修改 Nginx 启用 SSL</h2><pre class=" language-shell"><code class="language-shell">http {  # 新增  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  ssl_prefer_server_ciphers on;  # 兼容其他老浏览器的 ssl_ciphers 设置请访问 https://wiki.mozilla.org/Security/Server_Side_TLS  server {    listen 80 default_server;    # 新增    listen 443 ssl;    ssl_certificate         /home/ubuntu/www/ssl/www.your-app.com.key.pem;    ssl_certificate_key     /home/ubuntu/www/ssl/www.your-app.com.key;    # ssl_dhparam     ssl_dhparam             /home/ubuntu/www/ssl/dhparam.pem;    # 其他省略  }}</code></pre><p>检查 Nginx 配置是否正确后重启</p><pre class=" language-shell"><code class="language-shell">sudo service nginx configtestsudo service nginx restart</code></pre><h2 id="后续维护"><a href="#后续维护" class="headerlink" title="后续维护"></a>后续维护</h2><p>Let’s Encrypt 的证书有效期是 90 天的，你需要定期 <code>renew</code> 重新申请，这部分 <code>acme.sh</code> 以及帮你做了，在安装的时候往 crontab 增加了一行每天执行的命令 <code>acme.sh --cron</code>:</p><pre class=" language-shell"><code class="language-shell">$ crontab -l0 0 * * * "/home/.acme.sh"/acme.sh --cron --home "/home/.acme.sh" > /dev/null</code></pre><blockquote><p>下面这段你可以尝试执行一下，看看是否正确</p></blockquote><pre class=" language-shell"><code class="language-shell">"/home/.acme.sh"/acme.sh --cron --home "/home/.acme.sh"</code></pre><p>这样就是正常的：</p><pre class=" language-shell"><code class="language-shell">[Fri Dec 23 11:50:30 CST 2016] Renew: 'www.your-app.com'[Fri Dec 23 11:50:30 CST 2016] Skip, Next renewal time is: Tue Feb 21 03:20:54 UTC 2017[Fri Dec 23 11:50:30 CST 2016] Add '--force' to force to renew.[Fri Dec 23 11:50:30 CST 2016] Skipped www.your-app.com</code></pre><p><code>acme.sh --cron</code> 命令执行以后将会 <strong>申请新的证书</strong> 并放到相同的文件路径。由于前面执行 <code>--installcert</code> 的时候告知了重新 Nginx 的方法，<code>acme.sh</code> 也同时会在证书更新以后重启 Nginx。</p><h2 id="最后走一下-acme-sh-–cron-的流程看看能否正确执行"><a href="#最后走一下-acme-sh-–cron-的流程看看能否正确执行" class="headerlink" title="最后走一下 acme.sh –cron 的流程看看能否正确执行"></a>最后走一下 acme.sh –cron 的流程看看能否正确执行</h2><pre class=" language-shell"><code class="language-shell">acme.sh --cron -f</code></pre><p>这个过程应该会得到这样的结果，并在最后重启 Nginx (不需要输入密码)</p><pre class=" language-shell"><code class="language-shell">[Tue Dec 27 14:28:09 CST 2016] Renew: 'www.your-app.com'[Tue Dec 27 14:28:09 CST 2016] Single domain='www.your-app.com'[Tue Dec 27 14:28:09 CST 2016] Getting domain auth token for each domain[Tue Dec 27 14:28:09 CST 2016] Getting webroot for domain='www.your-app.com'[Tue Dec 27 14:28:09 CST 2016] _w='/home/www/your-app/current/public/'[Tue Dec 27 14:28:09 CST 2016] Getting new-authz for domain='www.your-app.com'[Tue Dec 27 14:28:16 CST 2016] The new-authz request is ok.[Tue Dec 27 14:28:16 CST 2016] www.your-app.com is already verified, skip.[Tue Dec 27 14:28:16 CST 2016] www.your-app.com is already verified, skip http-01.[Tue Dec 27 14:28:16 CST 2016] www.your-app.com is already verified, skip http-01.[Tue Dec 27 14:28:16 CST 2016] Verify finished, start to sign.[Tue Dec 27 14:28:19 CST 2016] Cert success.... 省略[Fri Dec 23 11:09:02 CST 2016] Your cert is in  /home/.acme.sh/www.your-app.com/www.your-app.com.cer [Fri Dec 23 11:09:02 CST 2016] Your cert key is in  /home/.acme.sh/www.your-app.com/www.your-app.com.key [Fri Dec 23 11:09:04 CST 2016] The intermediate CA cert is in  /home/.acme.sh/www.your-app.com/ca.cer [Fri Dec 23 11:09:04 CST 2016] And the full chain certs is there:  /home/.acme.sh/www.your-app.com/fullchain.cer [Tue Dec 27 14:28:22 CST 2016] Run Le_ReloadCmd: sudo service nginx force-reload * Reloading nginx nginx                                                                [ OK ] [Tue Dec 27 14:28:22 CST 2016] Reload success</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;现在新建网站基本全部都要配置 SSL ，可以通过服务器提供商提供的免费 SSL 进行部署，但是有一个缺点，就是有效期一般只有一年，需要每年重新申请，重新安装，之前一直用 Let’s Encrypt 进行部署，防止后面忘记了，写一个记录。&lt;/p&gt;
&lt;h2 id=&quot;安装-acm</summary>
      
    
    
    
    
    <category term="网站" scheme="https://imoke.win/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>我的这一年</title>
    <link href="https://imoke.win/2024/02/19/1628/"/>
    <id>https://imoke.win/2024/02/19/1628/</id>
    <published>2024-02-19T08:28:13.000Z</published>
    <updated>2024-02-19T08:30:14.440Z</updated>
    
    <content type="html"><![CDATA[<p>总结2023年，忙也忙了。</p><p>2023年，工作上发生了很大的变化，由重庆分院变成了西南分院，分院也算真正意义上有了自己的管理层。</p><p>分院新的管理层走马上任，进行的静悄悄，没有工作交接，没有官宣，就这样糊里糊涂地开展工作了，然后是空降的院长，从长沙到成都，再到成都重庆两地跑。不管怎么样，新的机构，新的工作机制，就这样运行起来了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;总结2023年，忙也忙了。&lt;/p&gt;
&lt;p&gt;2023年，工作上发生了很大的变化，由重庆分院变成了西南分院，分院也算真正意义上有了自己的管理层。&lt;/p&gt;
&lt;p&gt;分院新的管理层走马上任，进行的静悄悄，没有工作交接，没有官宣，就这样糊里糊涂地开展工作了，然后是空降的院长，从长沙到成</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2024年读书计划</title>
    <link href="https://imoke.win/2023/12/25/2258/"/>
    <id>https://imoke.win/2023/12/25/2258/</id>
    <published>2023-12-25T14:58:13.000Z</published>
    <updated>2024-05-21T16:06:01.659Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>施工单位设计咨询工作的一点感想</title>
    <link href="https://imoke.win/2023/11/01/2305/"/>
    <id>https://imoke.win/2023/11/01/2305/</id>
    <published>2023-11-01T15:05:38.000Z</published>
    <updated>2024-05-21T15:27:32.566Z</updated>
    
    <content type="html"><![CDATA[<p>房地产走下坡路已经是不争的事实，随着一批批地产公司相继暴雷，更进一步加剧了土木行业的衰落。</p><p>近看来 EPC 、装配式、绿色建筑、智能化等一系列的也不算新的新名词，慢慢地被提及的越来越多，其中 EPC 模式发展方兴未艾，各大传统施工企业，纷纷下场布局 EPC，其中最大的一个特点就是施工企业自己成立了设计院，高举着设计引领的旗帜，想在日益衰落的土木行业里，能够开辟出一片新的天地。</p><p>很多设计院的设计人员也加入到施工企业的 EPC 布局中来，有的继续做设计，可能更多的还是做设计咨询或设计管理，作为施工企业的附属，立足设计，服务施工。那么设计人员来到施工企业，来做设计咨询也好，做设计管理也好，有什么优势与不足呢。</p><h4 id="如果设计人员做咨询"><a href="#如果设计人员做咨询" class="headerlink" title="如果设计人员做咨询"></a>如果设计人员做咨询</h4><p>很多设计院的人员转做咨询，要不站在设计的角度，成为专家型人员，这一处不满足规范，那一处设计不合理，如些云云，每每都要充分展现自己高超的技术和深厚的专业能力。</p><p>其实施工单位虽然一直高喊设计引领，价值工程，但是商人逐利，最根本的还是要赚钱，特别是在现在土木行业如此不景气的行情下，把握当下，及时落袋为安，方为上计。因此，设计咨询，根本还是要把企业的利益放在首位，好一点的企业，可以在不降低工程品质，保证甲方利益的前提下，实现自己的利益最大化，甚至有的企业，想方设法，一味地通过设计优化，来提高自身的利润率。其实也无可厚非，现在的土木已经是一片红海，每一个企业首先考虑的就是如何生存下来，如果牺牲自己成就甲方，可能最终甲方比你还先倒下，前期给甲方输的血，得不到一点点回报，某大就是一个活生生的例子，真的是血本无归。</p><p>话题回到设计人员做咨询，这种专家型的咨询，可能只是在自嗨，一顿操作狂如虎，一看利润两毛五，不能满足总包的需求，技术再好，也能空有一身好武艺，英雄无用武之地。所以，还是要考虑如何帮总包实现利益最大化。</p><p>在技术可行的范围内，可以考虑<strong>哪些可以实现永临结合、哪些能够实现快速施工、哪些是总包亏损项可以优化减少、哪些是盈利项可以适当增加</strong>，如此永临结合、快速施工可以节省施工成本，实现节流；减亏损增盈利，可以实现开源。技术是死是，人是活的，能用技术造福一方，也是功不可没的。</p><h4 id="如果设计人员做管理"><a href="#如果设计人员做管理" class="headerlink" title="如果设计人员做管理"></a>如果设计人员做管理</h4><p>如果设计人员转到施工单位做设计管理，施工单位的设计管理，与以往接触的地产公司的设计管理有相似也有不同，地产公司可能主要是催图纸进度，标准做法，节省造价等方面。</p><p>撇开具体的管理不说，因为我也是一个管理小白，最近感触比较深的一个方面，之前在设计院，面对的是一个个的项目，而且设计师项目并行的时候并不是很多，能够同时做两三个项目已经是很难得了，而且每个项目的流程基本都差不多，特别是做施工图的，前期方案已经把基本的框架都定好了，施工图只需要按照规范规定，把方案细化就可以了，即使甲方有修改，也都是局部的修改。所以设计师的工作路径基本都是一条直线，多的两三第直线并行，一步步往下走即可。</p><p>而在施工单位做管理，事情太多又太杂，每个项目的营销基础不同，合同条件不同，项目诉求也不同，甚至目标也不明确。</p><p>一般的设计人员初作设计管理，往往就像是无头的苍蝇，到处乱撞，付出了很多，收获却了了，事倍功半。由以往的直线型工作路径，单一型工作路到，到施工管理的多线程，曲线型工作路径，如果不能很好地适应，是做不好管理工作的。而我接触到的大部分设计管理人员，却基本都还处在管理的未入门阶段，一天就是乱飞。<strong>如何能把多个复杂的问题梳理清楚，并且能够有条理的安排好工作</strong>，这也许是我们这些从设计转到管理，最需要解决好的问题，。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;房地产走下坡路已经是不争的事实，随着一批批地产公司相继暴雷，更进一步加剧了土木行业的衰落。&lt;/p&gt;
&lt;p&gt;近看来 EPC 、装配式、绿色建筑、智能化等一系列的也不算新的新名词，慢慢地被提及的越来越多，其中 EPC 模式发展方兴未艾，各大传统施工企业，纷纷下场布局 EPC，其</summary>
      
    
    
    
    <category term="设计咨询" scheme="https://imoke.win/categories/%E8%AE%BE%E8%AE%A1%E5%92%A8%E8%AF%A2/"/>
    
    
    <category term="设计咨询" scheme="https://imoke.win/tags/%E8%AE%BE%E8%AE%A1%E5%92%A8%E8%AF%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建个人网站经验</title>
    <link href="https://imoke.win/2023/10/23/1915/"/>
    <id>https://imoke.win/2023/10/23/1915/</id>
    <published>2023-10-23T11:15:29.000Z</published>
    <updated>2024-05-21T16:07:27.301Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p></blockquote><p>保留上面一段话，是 Hexo 自带的文章中的一段，以后不会了，可以快速找到文档。</p><p>也许半年才想起来敲两个文字，所以先把教程写好吧，到时候别想写字的时候，不知道怎么使用软件了。</p><p>首先在 hexo 文件夹下打开 git。</p><h3 id="创建新的文章"><a href="#创建新的文章" class="headerlink" title="创建新的文章"></a>创建新的文章</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"文章名称"</span></code></pre><p>文章使用日期命名，如“20240515”，文章保存在“hexo/source/_posts”文件夹下，然后可以使用 markdown 编辑软件，打开刚才创建的文件，进行编辑。</p><p>文章 Front-matter 选项详解</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 这是文章的标题<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00 </span><span class="token comment" spellcheck="true">#文章创建时间</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 作者<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg <span class="token comment" spellcheck="true">#文章特征图</span><span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 表示该文章是否需要加入到首页轮播封面中</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg <span class="token comment" spellcheck="true"># 表示该文章在首页轮播封面需要显示的图片路径</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown <span class="token comment" spellcheck="true"># 文章分类</span><span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 文章标签</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><h3 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h3><pre class=" language-bash"><code class="language-bash">$ hexo clean</code></pre><h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><pre class=" language-bash"><code class="language-bash">$ hexo g</code></pre><h3 id="推送到服务器"><a href="#推送到服务器" class="headerlink" title="推送到服务器"></a>推送到服务器</h3><pre class=" language-bash"><code class="language-bash">$ hexo d</code></pre><p>用到的功能不多，基本就是平时记录一下文字，以上几条命令足够了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt; Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documen</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://imoke.win/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>读了 3000 篇公众号文章后，我决定自己建个论坛</title>
    <link href="https://imoke.win/2023/10/23/1715/"/>
    <id>https://imoke.win/2023/10/23/1715/</id>
    <published>2023-10-23T09:15:29.000Z</published>
    <updated>2024-05-21T15:48:21.110Z</updated>
    
    <content type="html"><![CDATA[<p>读了 3000 篇公众号文章后，我决定自己建个论坛</p><p>很久以前，微信公众号才刚刚推出的时候，我还是比较喜欢公众号的，可以跟很多优秀的人学习，好像那时候的公众号就是大家分享知识的一个平台，我自己还注册有一个公众号，但是看的多写的少。</p><p>慢慢的，随着越来越多的人进入公众号这个领域，慢慢地，现在的公众号也不再是以前那个公众号，一篇文章里，一半是废话或软文，要在一堆的文章中，找到一点有用的信息，需要花费大量的时间。</p><p>在读了 3000 篇公众号文章后，我决定还是自己来写，但是无奈又水平有限，可能做个搬运工更适合我。许久养下的习惯，还是习惯看公众号文章，从现在起，由单纯的读，逐步转变到抄，希望最后也能自己写点文字，是为记。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;读了 3000 篇公众号文章后，我决定自己建个论坛&lt;/p&gt;
&lt;p&gt;很久以前，微信公众号才刚刚推出的时候，我还是比较喜欢公众号的，可以跟很多优秀的人学习，好像那时候的公众号就是大家分享知识的一个平台，我自己还注册有一个公众号，但是看的多写的少。&lt;/p&gt;
&lt;p&gt;慢慢的，随着越来</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://imoke.win/tags/Hexo/"/>
    
  </entry>
  
</feed>
